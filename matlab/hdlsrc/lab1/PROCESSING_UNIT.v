// -------------------------------------------------------------
// 
// File Name: hdlsrc\lab1\PROCESSING_UNIT.v
// Created: 2023-01-14 16:19:47
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// o_Y                           ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PROCESSING_UNIT
// Source Path: lab1/PROCESSING_UNIT
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PROCESSING_UNIT
          (I_CLK,
           I_RST_N,
           I_CLK_eN,
           I_W0,
           I_W1,
           I_W2,
           I_W3,
           I_X0,
           I_X1,
           I_X2,
           I_X3,
           ce_out,
           o_Y);


  input   I_CLK;
  input   I_RST_N;
  input   I_CLK_eN;
  input   signed [7:0] I_W0;  // int8
  input   signed [7:0] I_W1;  // int8
  input   signed [7:0] I_W2;  // int8
  input   signed [7:0] I_W3;  // int8
  input   signed [7:0] I_X0;  // int8
  input   signed [7:0] I_X1;  // int8
  input   signed [7:0] I_X2;  // int8
  input   signed [7:0] I_X3;  // int8
  output  ce_out;
  output  signed [15:0] o_Y;  // int16


  wire enb;
  reg signed [7:0] Unit_Delay_out1;  // int8
  reg signed [7:0] Unit_Delay2_out1;  // int8
  reg signed [7:0] Unit_Delay4_out1;  // int8
  reg signed [7:0] Unit_Delay6_out1;  // int8
  reg signed [7:0] Unit_Delay1_out1;  // int8
  wire signed [15:0] Product_mul_temp;  // sfix16
  wire [15:0] Product_out1;  // uint16
  reg signed [7:0] Unit_Delay3_out1;  // int8
  wire signed [15:0] Product1_mul_temp;  // sfix16
  wire [15:0] Product1_out1;  // uint16
  wire [16:0] Add_stage2_add_temp;  // ufix17
  wire [15:0] Add_stage2_cast;  // ufix16
  wire [16:0] Add_stage2_1;  // ufix17
  wire [16:0] Add_stage2_2;  // ufix17
  wire [16:0] Add_op_stage1;  // ufix17
  reg signed [7:0] Unit_Delay5_out1;  // int8
  wire signed [15:0] Product2_mul_temp;  // sfix16
  wire [15:0] Product2_out1;  // uint16
  wire [15:0] Add_stage3_add_cast;  // ufix16
  wire [16:0] Add_stage3_add_cast_1;  // ufix17
  wire [16:0] Add_stage3_add_temp;  // ufix17
  wire [15:0] Add_stage3_cast;  // ufix16
  wire [16:0] Add_stage3_1;  // ufix17
  wire [17:0] Add_op_stage2;  // ufix18
  reg signed [7:0] Unit_Delay7_out1;  // int8
  wire signed [15:0] Product3_mul_temp;  // sfix16
  wire [15:0] Product3_out1;  // uint16
  wire [15:0] Add_stage4_add_cast;  // ufix16
  wire [16:0] Add_stage4_add_cast_1;  // ufix17
  wire [16:0] Add_stage4_add_temp;  // ufix17
  wire [15:0] Add_stage4_cast;  // ufix16
  wire [16:0] Add_stage4_1;  // ufix17
  wire signed [15:0] Add_out1;  // int16
  reg signed [15:0] Unit_Delay8_out1;  // int16


  assign enb = I_CLK_eN;

  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_out1 <= I_W0;
        end
      end
    end



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay2_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay2_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay2_out1 <= I_W2;
        end
      end
    end



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay4_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay4_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay4_out1 <= I_X0;
        end
      end
    end



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay6_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay6_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay6_out1 <= I_X2;
        end
      end
    end



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay1_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay1_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay1_out1 <= I_W1;
        end
      end
    end



  assign Product_mul_temp = Unit_Delay_out1 * Unit_Delay1_out1;
  assign Product_out1 = (Product_mul_temp[15] == 1'b1 ? 16'b0000000000000000 :
              Product_mul_temp);



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay3_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay3_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay3_out1 <= I_W3;
        end
      end
    end



  assign Product1_mul_temp = Unit_Delay2_out1 * Unit_Delay3_out1;
  assign Product1_out1 = (Product1_mul_temp[15] == 1'b1 ? 16'b0000000000000000 :
              Product1_mul_temp);



  assign Add_stage2_1 = {1'b0, Product_out1};
  assign Add_stage2_2 = {1'b0, Product1_out1};
  assign Add_stage2_add_temp = Add_stage2_1 + Add_stage2_2;
  assign Add_stage2_cast = (Add_stage2_add_temp[16] != 1'b0 ? 16'b1111111111111111 :
              Add_stage2_add_temp[15:0]);
  assign Add_op_stage1 = {1'b0, Add_stage2_cast};



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay5_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay5_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay5_out1 <= I_X1;
        end
      end
    end



  assign Product2_mul_temp = Unit_Delay4_out1 * Unit_Delay5_out1;
  assign Product2_out1 = (Product2_mul_temp[15] == 1'b1 ? 16'b0000000000000000 :
              Product2_mul_temp);



  assign Add_stage3_add_cast = (Add_op_stage1[16] != 1'b0 ? 16'b1111111111111111 :
              Add_op_stage1[15:0]);
  assign Add_stage3_add_cast_1 = {1'b0, Add_stage3_add_cast};
  assign Add_stage3_1 = {1'b0, Product2_out1};
  assign Add_stage3_add_temp = Add_stage3_add_cast_1 + Add_stage3_1;
  assign Add_stage3_cast = (Add_stage3_add_temp[16] != 1'b0 ? 16'b1111111111111111 :
              Add_stage3_add_temp[15:0]);
  assign Add_op_stage2 = {2'b0, Add_stage3_cast};



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay7_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay7_out1 <= 8'sb00000000;
      end
      else begin
        if (enb) begin
          Unit_Delay7_out1 <= I_X3;
        end
      end
    end



  assign Product3_mul_temp = Unit_Delay6_out1 * Unit_Delay7_out1;
  assign Product3_out1 = (Product3_mul_temp[15] == 1'b1 ? 16'b0000000000000000 :
              Product3_mul_temp);



  assign Add_stage4_add_cast = (Add_op_stage2[17:16] != 2'b00 ? 16'b1111111111111111 :
              Add_op_stage2[15:0]);
  assign Add_stage4_add_cast_1 = {1'b0, Add_stage4_add_cast};
  assign Add_stage4_1 = {1'b0, Product3_out1};
  assign Add_stage4_add_temp = Add_stage4_add_cast_1 + Add_stage4_1;
  assign Add_stage4_cast = (Add_stage4_add_temp[16] != 1'b0 ? 16'b1111111111111111 :
              Add_stage4_add_temp[15:0]);
  assign Add_out1 = (Add_stage4_cast[15] != 1'b0 ? 16'sb0111111111111111 :
              Add_stage4_cast);



  always @(posedge I_CLK or posedge I_RST_N)
    begin : Unit_Delay8_process
      if (I_RST_N == 1'b1) begin
        Unit_Delay8_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay8_out1 <= Add_out1;
        end
      end
    end



  assign o_Y = Unit_Delay8_out1;

  assign ce_out = I_CLK_eN;

endmodule  // PROCESSING_UNIT

