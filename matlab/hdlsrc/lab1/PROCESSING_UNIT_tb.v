// -------------------------------------------------------------
// 
// File Name: C:\3 course\AP\lab1\matlab\hdlsrc\lab1\PROCESSING_UNIT_tb.v
// Created: 2023-01-14 20:15:57
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// o_Y                           ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PROCESSING_UNIT_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PROCESSING_UNIT_tb;



  reg  I_CLK;
  reg  I_RST_N;
  wire I_CLK_eN;
  wire o_Y_done;  // ufix1
  wire rdEnb;
  wire o_Y_done_enb;  // ufix1
  reg [3:0] o_Y_addr;  // ufix4
  wire o_Y_active;  // ufix1
  reg [3:0] Data_Type_Conversion_out1_addr;  // ufix4
  wire [3:0] Data_Type_Conversion7_out1_addr_delay_1;  // ufix4
  reg  tb_enb_delay;
  reg signed [31:0] fp_I_X3;  // sfix32
  reg signed [7:0] rawData_I_X3;  // int8
  reg signed [31:0] status_I_X3;  // sfix32
  reg signed [7:0] holdData_I_X3;  // int8
  reg signed [7:0] I_X3_offset;  // int8
  wire signed [7:0] I_X3;  // int8
  wire [3:0] Data_Type_Conversion6_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_X2;  // sfix32
  reg signed [7:0] rawData_I_X2;  // int8
  reg signed [31:0] status_I_X2;  // sfix32
  reg signed [7:0] holdData_I_X2;  // int8
  reg signed [7:0] I_X2_offset;  // int8
  wire signed [7:0] I_X2;  // int8
  wire [3:0] Data_Type_Conversion5_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_X1;  // sfix32
  reg signed [7:0] rawData_I_X1;  // int8
  reg signed [31:0] status_I_X1;  // sfix32
  reg signed [7:0] holdData_I_X1;  // int8
  reg signed [7:0] I_X1_offset;  // int8
  wire signed [7:0] I_X1;  // int8
  wire [3:0] Data_Type_Conversion4_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_X0;  // sfix32
  reg signed [7:0] rawData_I_X0;  // int8
  reg signed [31:0] status_I_X0;  // sfix32
  reg signed [7:0] holdData_I_X0;  // int8
  reg signed [7:0] I_X0_offset;  // int8
  wire signed [7:0] I_X0;  // int8
  wire [3:0] Data_Type_Conversion3_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_W3;  // sfix32
  reg signed [7:0] rawData_I_W3;  // int8
  reg signed [31:0] status_I_W3;  // sfix32
  reg signed [7:0] holdData_I_W3;  // int8
  reg signed [7:0] I_W3_offset;  // int8
  wire signed [7:0] I_W3;  // int8
  wire [3:0] Data_Type_Conversion2_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_W2;  // sfix32
  reg signed [7:0] rawData_I_W2;  // int8
  reg signed [31:0] status_I_W2;  // sfix32
  reg signed [7:0] holdData_I_W2;  // int8
  reg signed [7:0] I_W2_offset;  // int8
  wire signed [7:0] I_W2;  // int8
  wire [3:0] Data_Type_Conversion1_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_W1;  // sfix32
  reg signed [7:0] rawData_I_W1;  // int8
  reg signed [31:0] status_I_W1;  // sfix32
  reg signed [7:0] holdData_I_W1;  // int8
  reg signed [7:0] I_W1_offset;  // int8
  wire signed [7:0] I_W1;  // int8
  wire Data_Type_Conversion_out1_active;  // ufix1
  wire Data_Type_Conversion_out1_enb;  // ufix1
  wire [3:0] Data_Type_Conversion_out1_addr_delay_1;  // ufix4
  reg signed [31:0] fp_I_W0;  // sfix32
  reg signed [7:0] rawData_I_W0;  // int8
  reg signed [31:0] status_I_W0;  // sfix32
  reg signed [7:0] holdData_I_W0;  // int8
  reg signed [7:0] I_W0_offset;  // int8
  wire signed [7:0] I_W0;  // int8
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire signed [15:0] o_Y;  // int16
  wire o_Y_enb;  // ufix1
  wire o_Y_lastAddr;  // ufix1
  wire [3:0] o_Y_addr_delay_1;  // ufix4
  reg signed [31:0] fp_o_Y_expected;  // sfix32
  reg signed [15:0] o_Y_expected;  // int16
  reg signed [31:0] status_o_Y_expected;  // sfix32
  wire signed [15:0] o_Y_ref;  // int16
  reg  o_Y_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign o_Y_done_enb = o_Y_done & rdEnb;



  assign o_Y_active = o_Y_addr != 4'b1010;



  assign #1 Data_Type_Conversion7_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_X3
  initial
    begin : I_X3_fileread
      fp_I_X3 = $fopen("I_X3.dat", "r");
      status_I_X3 = $rewind(fp_I_X3);
    end

  always @(Data_Type_Conversion7_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_X3 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_X3 = $fscanf(fp_I_X3, "%h", rawData_I_X3);
      end
    end

  // holdData reg for Data_Type_Conversion7_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion7_out1
      if (I_RST_N) begin
        holdData_I_X3 <= 8'bx;
      end
      else begin
        holdData_I_X3 <= rawData_I_X3;
      end
    end

  always @(rawData_I_X3 or rdEnb)
    begin : stimuli_Data_Type_Conversion7_out1_1
      if (rdEnb == 1'b0) begin
        I_X3_offset <= holdData_I_X3;
      end
      else begin
        I_X3_offset <= rawData_I_X3;
      end
    end

  assign #2 I_X3 = I_X3_offset;

  assign #1 Data_Type_Conversion6_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_X2
  initial
    begin : I_X2_fileread
      fp_I_X2 = $fopen("I_X2.dat", "r");
      status_I_X2 = $rewind(fp_I_X2);
    end

  always @(Data_Type_Conversion6_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_X2 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_X2 = $fscanf(fp_I_X2, "%h", rawData_I_X2);
      end
    end

  // holdData reg for Data_Type_Conversion6_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion6_out1
      if (I_RST_N) begin
        holdData_I_X2 <= 8'bx;
      end
      else begin
        holdData_I_X2 <= rawData_I_X2;
      end
    end

  always @(rawData_I_X2 or rdEnb)
    begin : stimuli_Data_Type_Conversion6_out1_1
      if (rdEnb == 1'b0) begin
        I_X2_offset <= holdData_I_X2;
      end
      else begin
        I_X2_offset <= rawData_I_X2;
      end
    end

  assign #2 I_X2 = I_X2_offset;

  assign #1 Data_Type_Conversion5_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_X1
  initial
    begin : I_X1_fileread
      fp_I_X1 = $fopen("I_X1.dat", "r");
      status_I_X1 = $rewind(fp_I_X1);
    end

  always @(Data_Type_Conversion5_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_X1 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_X1 = $fscanf(fp_I_X1, "%h", rawData_I_X1);
      end
    end

  // holdData reg for Data_Type_Conversion5_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion5_out1
      if (I_RST_N) begin
        holdData_I_X1 <= 8'bx;
      end
      else begin
        holdData_I_X1 <= rawData_I_X1;
      end
    end

  always @(rawData_I_X1 or rdEnb)
    begin : stimuli_Data_Type_Conversion5_out1_1
      if (rdEnb == 1'b0) begin
        I_X1_offset <= holdData_I_X1;
      end
      else begin
        I_X1_offset <= rawData_I_X1;
      end
    end

  assign #2 I_X1 = I_X1_offset;

  assign #1 Data_Type_Conversion4_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_X0
  initial
    begin : I_X0_fileread
      fp_I_X0 = $fopen("I_X0.dat", "r");
      status_I_X0 = $rewind(fp_I_X0);
    end

  always @(Data_Type_Conversion4_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_X0 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_X0 = $fscanf(fp_I_X0, "%h", rawData_I_X0);
      end
    end

  // holdData reg for Data_Type_Conversion4_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion4_out1
      if (I_RST_N) begin
        holdData_I_X0 <= 8'bx;
      end
      else begin
        holdData_I_X0 <= rawData_I_X0;
      end
    end

  always @(rawData_I_X0 or rdEnb)
    begin : stimuli_Data_Type_Conversion4_out1_1
      if (rdEnb == 1'b0) begin
        I_X0_offset <= holdData_I_X0;
      end
      else begin
        I_X0_offset <= rawData_I_X0;
      end
    end

  assign #2 I_X0 = I_X0_offset;

  assign #1 Data_Type_Conversion3_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_W3
  initial
    begin : I_W3_fileread
      fp_I_W3 = $fopen("I_W3.dat", "r");
      status_I_W3 = $rewind(fp_I_W3);
    end

  always @(Data_Type_Conversion3_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_W3 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_W3 = $fscanf(fp_I_W3, "%h", rawData_I_W3);
      end
    end

  // holdData reg for Data_Type_Conversion3_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion3_out1
      if (I_RST_N) begin
        holdData_I_W3 <= 8'bx;
      end
      else begin
        holdData_I_W3 <= rawData_I_W3;
      end
    end

  always @(rawData_I_W3 or rdEnb)
    begin : stimuli_Data_Type_Conversion3_out1_1
      if (rdEnb == 1'b0) begin
        I_W3_offset <= holdData_I_W3;
      end
      else begin
        I_W3_offset <= rawData_I_W3;
      end
    end

  assign #2 I_W3 = I_W3_offset;

  assign #1 Data_Type_Conversion2_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_W2
  initial
    begin : I_W2_fileread
      fp_I_W2 = $fopen("I_W2.dat", "r");
      status_I_W2 = $rewind(fp_I_W2);
    end

  always @(Data_Type_Conversion2_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_W2 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_W2 = $fscanf(fp_I_W2, "%h", rawData_I_W2);
      end
    end

  // holdData reg for Data_Type_Conversion2_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion2_out1
      if (I_RST_N) begin
        holdData_I_W2 <= 8'bx;
      end
      else begin
        holdData_I_W2 <= rawData_I_W2;
      end
    end

  always @(rawData_I_W2 or rdEnb)
    begin : stimuli_Data_Type_Conversion2_out1_1
      if (rdEnb == 1'b0) begin
        I_W2_offset <= holdData_I_W2;
      end
      else begin
        I_W2_offset <= rawData_I_W2;
      end
    end

  assign #2 I_W2 = I_W2_offset;

  assign #1 Data_Type_Conversion1_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_W1
  initial
    begin : I_W1_fileread
      fp_I_W1 = $fopen("I_W1.dat", "r");
      status_I_W1 = $rewind(fp_I_W1);
    end

  always @(Data_Type_Conversion1_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_W1 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_W1 = $fscanf(fp_I_W1, "%h", rawData_I_W1);
      end
    end

  // holdData reg for Data_Type_Conversion1_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion1_out1
      if (I_RST_N) begin
        holdData_I_W1 <= 8'bx;
      end
      else begin
        holdData_I_W1 <= rawData_I_W1;
      end
    end

  always @(rawData_I_W1 or rdEnb)
    begin : stimuli_Data_Type_Conversion1_out1_1
      if (rdEnb == 1'b0) begin
        I_W1_offset <= holdData_I_W1;
      end
      else begin
        I_W1_offset <= rawData_I_W1;
      end
    end

  assign #2 I_W1 = I_W1_offset;

  assign Data_Type_Conversion_out1_active = Data_Type_Conversion_out1_addr != 4'b1010;



  assign Data_Type_Conversion_out1_enb = Data_Type_Conversion_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge I_CLK or posedge I_RST_N)
    begin : DataTypeConversion_process
      if (I_RST_N == 1'b1) begin
        Data_Type_Conversion_out1_addr <= 4'b0000;
      end
      else begin
        if (Data_Type_Conversion_out1_enb) begin
          if (Data_Type_Conversion_out1_addr >= 4'b1010) begin
            Data_Type_Conversion_out1_addr <= 4'b0000;
          end
          else begin
            Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + 4'b0001;
          end
        end
      end
    end



  assign #1 Data_Type_Conversion_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for I_W0
  initial
    begin : I_W0_fileread
      fp_I_W0 = $fopen("I_W0.dat", "r");
      status_I_W0 = $rewind(fp_I_W0);
    end

  always @(Data_Type_Conversion_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_W0 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_I_W0 = $fscanf(fp_I_W0, "%h", rawData_I_W0);
      end
    end

  // holdData reg for Data_Type_Conversion_out1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : stimuli_Data_Type_Conversion_out1
      if (I_RST_N) begin
        holdData_I_W0 <= 8'bx;
      end
      else begin
        holdData_I_W0 <= rawData_I_W0;
      end
    end

  always @(rawData_I_W0 or rdEnb)
    begin : stimuli_Data_Type_Conversion_out1_1
      if (rdEnb == 1'b0) begin
        I_W0_offset <= holdData_I_W0;
      end
      else begin
        I_W0_offset <= rawData_I_W0;
      end
    end

  assign #2 I_W0 = I_W0_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ I_RST_N;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge I_CLK or posedge I_RST_N)
    begin : u_enable_delay
      if (I_RST_N) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 I_CLK_eN = rdEnb;

  initial
    begin : I_RST_N_gen
      I_RST_N <= 1'b1;
      # (20);
      @ (posedge I_CLK)
      # (2);
      I_RST_N <= 1'b0;
    end

  always 
    begin : I_CLK_gen
      I_CLK <= 1'b1;
      # (5);
      I_CLK <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        I_CLK <= 1'b1;
        # (5);
        I_CLK <= 1'b0;
        # (5);
        $stop;
      end
    end

  PROCESSING_UNIT u_PROCESSING_UNIT (.I_CLK(I_CLK),
                                     .I_RST_N(I_RST_N),
                                     .I_CLK_eN(I_CLK_eN),
                                     .I_W0(I_W0),  // int8
                                     .I_W1(I_W1),  // int8
                                     .I_W2(I_W2),  // int8
                                     .I_W3(I_W3),  // int8
                                     .I_X0(I_X0),  // int8
                                     .I_X1(I_X1),  // int8
                                     .I_X2(I_X2),  // int8
                                     .I_X3(I_X3),  // int8
                                     .ce_out(ce_out),
                                     .o_Y(o_Y)  // int16
                                     );

  assign o_Y_enb = ce_out & o_Y_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge I_CLK or posedge I_RST_N)
    begin : c_2_process
      if (I_RST_N == 1'b1) begin
        o_Y_addr <= 4'b0000;
      end
      else begin
        if (o_Y_enb) begin
          if (o_Y_addr >= 4'b1010) begin
            o_Y_addr <= 4'b0000;
          end
          else begin
            o_Y_addr <= o_Y_addr + 4'b0001;
          end
        end
      end
    end



  assign o_Y_lastAddr = o_Y_addr >= 4'b1010;



  assign o_Y_done = o_Y_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge I_CLK or posedge I_RST_N)
    begin : checkDone_1
      if (I_RST_N) begin
        check1_done <= 0;
      end
      else begin
        if (o_Y_done_enb) begin
          check1_done <= o_Y_done;
        end
      end
    end

  assign #1 o_Y_addr_delay_1 = o_Y_addr;

  // Data source for o_Y_expected
  initial
    begin : o_Y_expected_fileread
      fp_o_Y_expected = $fopen("o_Y_expected.dat", "r");
      status_o_Y_expected = $rewind(fp_o_Y_expected);
    end

  always @(o_Y_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        o_Y_expected <= 16'bx;
      end
      else if (ce_out == 1) begin
        status_o_Y_expected = $fscanf(fp_o_Y_expected, "%h", o_Y_expected);
      end
    end

  assign o_Y_ref = o_Y_expected;

  always @(posedge I_CLK or posedge I_RST_N)
    begin : o_Y_checker
      if (I_RST_N == 1'b1) begin
        o_Y_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && o_Y !== o_Y_ref) begin
          o_Y_testFailure <= 1'b1;
          $display("ERROR in o_Y at time %t : Expected '%h' Actual '%h'", $time, o_Y_ref, o_Y);
        end
      end
    end

  assign testFailure = o_Y_testFailure;

  always @(posedge I_CLK)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // PROCESSING_UNIT_tb

